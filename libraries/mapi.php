<?php/** * @package		Magento SOAP v1 API Wrapper (Laravel Bundle) * @author		Matteo Castiglioni <http://www.rabbitpills.com> * @version		Release: 1.0 */class Mapi{	private static $instance;		private $_wsdl_instance;	//Magento API instance	private $_wsdl_session;		//Magento login session key	private $_wsdl_user;		//API Username	private $_wsdl_key;			//API Password	private $_wsdl_url;			//Magento API WSDL document uri	private $_wsdl_params;		//SOAP options		public function __construct()	{		self::$instance = $this;		set_exception_handler(array($this,"_handle_exception"));				$this->_wsdl_url	= Config::get('magentoapi::options.wsdl_url');		$this->_wsdl_user	= Config::get('magentoapi::options.wsdl_user');		$this->_wsdl_key	= Config::get('magentoapi::options.wsdl_key');		$this->_wsdl_params	= Config::get('magentoapi::options.wsdl_params');		Asset::container('header')->bundle('magentoapi');        Asset::container('header')->add('style', 'css/style.css');				$this->_check_soap();		$this->_init();    }	    private function _handle_exception($exception)	{		echo $exception->getMessage();    }	    private function _check_soap()	{		if(extension_loaded('soap')===FALSE)			throw new Exception('Magento API Library - PHP SOAP extension is not enable');	}	    private function _init()	{		try{			$this->_wsdl_instance = new SoapClient($this->_wsdl_url, $this->_wsdl_params);			$this->_wsdl_session = $this->_wsdl_instance->login($this->_wsdl_user, $this->_wsdl_key);		}catch(Exception $e){			throw new Exception($e);		}	}    private function _call($method, $param = array())	{		try{			return Response::json($this->_wsdl_instance->call($this->_wsdl_session, $method, $param));		}catch(Exception $e){			throw new Exception($e);		}    }	    public static function call($method=NULL, $params=NULL)	{		try{			$class_instance = Mapi::$instance;			$mapi = !$class_instance ? new Mapi() : $class_instance;			return call_user_func_array(array($mapi, '_call'),array($method, $params));		}catch(Exception $e){			throw new Exception($e);		}    }		public function get_resources()	{		try{			return $this->_wsdl_instance->resources($this->_wsdl_session);		}catch(Exception $e){			throw new Exception($e);		}	}	    /**     * Catch-all method for requests that can't be matched.     *     * @param  string    $method     * @param  array     $parameters     * @return Response     */    public function __call($method, $parameters)	{        return Response::error('404');    }}